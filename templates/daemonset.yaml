# 参考官方部署文件 https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.0/deploy/static/provider/cloud/deploy.yaml #
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
#######################
# 需要创建的ConfigMaps          #
#######################
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-controller-leader-nginx
  namespace: {{ .Release.Namespace }}
  annotations:
  labels:
    cattle.io/creator: norman
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  # https://github.com/rancher/rancher/issues/14323 (load balancing 413 Request Entity Too Large)
  proxy-body-size: "0"
  {{- if .Values.disableHSTS}}
  ssl-redirect: "false"
  hsts: "false"
  {{- end}}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
#####################
# ServiceAccount
#####################
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
  name: nginx-ingress-clusterrole
rules:
  - apiGroups:
      - ""
      - extensions
      - networking.k8s.io
      - apps
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
      - services
      - ingresses
      - deployments
    verbs:
      - create
      - get
      - update
      - list
      - patch
      - watch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
  name: nginx-ingress-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: {{ .Release.Namespace }}
---
#####################
# Controller DaemonSet
#####################
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
  name: nginx-ingress-controller
  namespace: {{ .Release.Namespace }}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ingress-nginx
  template:
    metadata:
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app: ingress-nginx
    spec:
      #默认不设置亲和性
      #affinity:
      #  nodeAffinity:
      #    requiredDuringSchedulingIgnoredDuringExecution:
      #      nodeSelectorTerms:
      #      - matchExpressions:
      #        - key: beta.kubernetes.io/os
      #          operator: NotIn
      #          values:
      #          - windows
      #        - key: node-role.kubernetes.io/worker
      #          operator: Exists
      {{- if .Values.nodeSelector}}
      nodeSelector:
        {{- $labels := regexSplit "," .Values.nodeSelector -1 }}
        {{- range $labels }}
        {{ . | replace "=" ": "}}
          {{- end}}
      {{- end}}
      containers:
      - args:
        - /nginx-ingress-controller
        #- --default-backend-service=$(POD_NAMESPACE)/default-http-backend
        # 默认后端指向rancher的服务
        {{- if .Values.defaultHttpBackend }}
        - --default-backend-service={{ .Values.defaultHttpBackend }}
        {{- end }}
        - --configmap=$(POD_NAMESPACE)/nginx-configuration
        - --election-id=ingress-controller-leader
        - --ingress-class={{ .Values.ingressClassName }}
        - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
        - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
        - --annotations-prefix=nginx.ingress.kubernetes.io
        # 用于指定默认的证书。需要在密文中创建此证书
        # 或者通过kubectl create secret tls ${CERT_NAME} --key ${KEY_FILE} --cert ${CERT_FILE}创建
        {{- if .Values.defaultSSLCertificate }}
        - --default-ssl-certificate={{ .Values.defaultSSLCertificate }}
        {{- end }}
        - --http-port={{ .Values.portHttp }}
        - --https-port={{ .Values.portHttps }}
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
        {{- if eq .Values.image.arch "x86"}}
        image: {{.Values.image.registry}}/{{ .Values.image.repository_x86 }}:{{ .Values.image.tag_x86 }}
        {{- else }}
        image: {{.Values.image.registry}}/{{ .Values.image.repository_arm64 }}:{{ .Values.image.tag_arm64 }}
        {{- end }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: nginx-ingress-controller
        ports:
          - containerPort: {{ .Values.portHttp }}
            hostPort: {{ .Values.portHttp }}
            name: http
            protocol: TCP
          - containerPort: {{ .Values.portHttps }}
            hostPort: {{ .Values.portHttps }}
            name: https
            protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        securityContext:
          allowPrivilegeEscalation: true
          privileged: true
          runAsUser: 0
          capabilities:
            add:
              - NET_BIND_SERVICE
            drop:
              - ALL
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      #serviceAccount: nginx-ingress-serviceaccount
      serviceAccountName: nginx-ingress-serviceaccount
      terminationGracePeriodSeconds: 60
      tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
#---
#############
#  默认的rancher后端，如果启动参数中
#############
#apiVersion: v1
#kind: Service
#metadata:
#  annotations:
#  labels:
#    app: default-http-backend
#  name: default-http-backend
#  namespace: {{ .Release.Namespace }}
#spec:
#  clusterIP:
#  ports:
#  - port: 80
#   protocol: TCP
#    targetPort: 8080
#  selector:
#    app: default-http-backend
#  sessionAffinity: None
#  type: ClusterIP
#status:
#  loadBalancer: {}
